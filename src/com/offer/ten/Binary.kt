package com.offer.ten

/**
 * 输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。
 *
 *
 * https://blog.csdn.net/mengmengdastyle/article/details/80317246
 * https://blog.csdn.net/bigtree_3721/article/details/82954171?utm_source=app
 * https://blog.csdn.net/qq_35082030/article/details/69945093
 */
object Binary {

    @JvmStatic
    fun main(args: Array<String>) {

    }


    /**
     * &:与运算符
     * 二元操作符，操作两个二进制数据；两个二进制数最低位对齐，只有当两个对位数都是1时才为1，否则为0
     *
     * 2 == 3 & 2
     *
     * 3:00000000 00000000 00000000 00000011(补码)
     * 2:00000000 00000000 00000000 00000010(补码)
     * v:00000000 00000000 00000000 00000010 (补码)= 2
     *
     *
     * |:或运算符
     * 二元操作符，操作两个二进制数据；两个二进制数最低位对齐，当两个对位数只要有一个是1则为1，否则为0
     * 3 == 3 | 2
     * 3:00000000 00000000 00000000 00000011(补码)
     * 2:00000000 00000000 00000000 00000010(补码)
     * v:00000000 00000000 00000000 00000011 (补码)= 3
     *
     * ^:异或运算符
     * 二元操作符，操作两个二进制数据；两个二进制数最低位对齐，只有当两个对位数字不同时为1，相同为0
     * 1 == 3 ^ 2
     * 3:00000000 00000000 00000000 00000011(补码)
     * 2:00000000 00000000 00000000 00000010(补码)
     * v:00000000 00000000 00000000 00000001 (补码)= 1
     *
     * >>>:无符号右移运算符
     * 它使用0扩展，无论正负都在最高位补0
     * 0 == 3 >>> 2
     * 3:00000000 00000000 00000000 00000011(补码)
     * v:00000000 00000000 00000000 00000000 (补码)== 0
     *
     * >>:右移运算符
     * 二元操作符，m数字二进制向右移动n位的结果；结果相当于： m / (2的n次方） 的结果向上取整
     * 0 == 3 >> 2
     * 3:00000000 00000000 00000000 00000011(补码)
     * v:00000000 00000000 00000000 00000000 (补码)= 0
     *
     * <<:左移运算符
     * 二元操作符，m数字二进制向左移动n位的结果；结果相当于： m*(2的n次方）
     * 12 == 3 << 2
     * 3:00000000 00000000 00000000 00000011(补码)
     * v:00000000 00000000 00000000 00001100 (补码)= 12
     *
     * ~:非运算符
     * 生成与输入位相反的值--若出入0，则输出1；若输入1，则输入0
     * -3 == = ~ 2
     * 2:00000000 00000000 00000000 00000010(补码)
     * v:11111111 11111111 11111111 11111101 (补码)= -3
     */
    fun countOf1InBinary1(value: Int): Int {
        // 记录数字中1的位数
        val result = 0

    }


    fun countOf1InBinary2(value: Int): Int {}
}